#include<iostream>
#include<string>
using namespace std;

int len;

class CircularQueue {   // 원형 큐 구현 클래스
private:
	int front;  // 첫 번쨰 요소의 앞의 위치
	int rear;  // 마지막 요소의 위치
	int* Queue;  // 원형 큐
	int capacity;  // 큐의 크기
public:
	CircularQueue();
	void enqueue(int data);  // 큐 삽입
	void pop();
	void size();
	void empty();
	void Front();
	void Back();
};

CircularQueue::CircularQueue() {
	front = rear = 0;
	capacity = len + 1;
	Queue = new int[capacity];
}

void CircularQueue::enqueue(int data) {
	if ((rear + 1) % capacity != 0) {
		Queue[rear + 1] = data;
		rear++;
	}
}

void CircularQueue::pop() {
	if (rear == front)
		cout << -1 << endl;
	else {
		cout << Queue[front + 1] << endl;
		front++;
		if (front == rear)
			rear = front = 0;
	}
}

void CircularQueue::size() {
	cout << rear - front << endl;
}

void CircularQueue::empty() {
	if (front == rear)
		cout << 1 << endl;
	else
		cout << 0 << endl;
}

void CircularQueue::Front() {
	if (rear == front)
		cout << -1 << endl;
	else
		cout << Queue[front + 1] << endl;
}

void CircularQueue::Back() {
	if (rear == front)
		cout << -1 << endl;
	else
		cout << Queue[rear] << endl;
}

int main(void) {
	cin >> len;
	CircularQueue Queue;
	
	for (int i = 0; i < len; i++)
	{
		string command;
		cin >> command;
		if (command == "push") {
			int data;
			cin >> data;
			Queue.enqueue(data);
		}
		else if (command == "pop")
			Queue.pop();
		else if (command == "size")
			Queue.size();
		else if (command == "empty")
			Queue.empty();
		else if (command == "front")
			Queue.Front();
		else if (command == "back")
			Queue.Back();
	}

	return 0;
}
